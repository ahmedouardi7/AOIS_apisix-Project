name: Docker compose CI for example

on:
  schedule:
    - cron: "0 1 * * *"
  push:
    branches: [master]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches:
      - master
      - 'release/apisix-2.15.**'

env:
  APISIX_VERSION: "3.13.0"

jobs:
  prepare:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set apisix version
        id: apisix
        run: |
          branch=${{ github.base_ref }}
          apisix_version=$( (echo ${branch} | grep -Po '\d*\.\d*\.\d*') || echo ${APISIX_VERSION} )
          echo "version=${apisix_version}" >> $GITHUB_OUTPUT

    outputs:
      apisix-version: ${{ steps.apisix.outputs.version }}

  build:
    runs-on: ubuntu-latest
    needs: prepare
    env:
      APISIX_VERSION: ${{ needs.prepare.outputs.apisix-version }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - debian
          - redhat

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          make build-on-${{ matrix.platform }}
          
      - name: use docker-compose
        env:
          APISIX_IMAGE_TAG: ${{ format('{0}-{1}', env.APISIX_VERSION, matrix.platform) }}
        run: docker compose -p docker-apisix -f example/docker-compose.yml up -d

      - name: Test APISIX
        run: |
          sleep 30

          curl http://127.0.0.1:9180/apisix/admin/routes/1 \
          -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
            {
            "uri": "/get",
            "upstream": {
                "type": "roundrobin",
                "nodes": {
                    "web1:80": 1
                }
            }
          }'
        

          result_code=`curl -I -m 10 -o /dev/null -s -w %{http_code} http://127.0.0.1:9080/get`
          if [[ $result_code -ne 200 ]];then
                  printf "result_code: %s\n" "$result_code"
                  exit 125
          fi


            - name: Upload a Build Artifact
  uses: actions/upload-artifact@v4.6.2
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.

    compression-level: # optional, default is 6
    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.

    overwrite: # optional, default is false
    # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.

    include-hidden-files: # optional, default is false
          
